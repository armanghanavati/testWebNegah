
#### 6. ارسال ایمیل با استفاده از Mailtrap:
از Mailtrap و Nodemailer برای ارسال ایمیل‌ها استفاده می‌کنیم.

```javascript
// email.js
const nodemailer = require('nodemailer');

// تنظیمات Mailtrap
const transporter = nodemailer.createTransport({
    host: 'smtp.mailtrap.io',
    port: 2525,
    auth: {
        user: 'your_mailtrap_user',
        pass: 'your_mailtrap_password',
    },
});

const sendReminderEmail = (email, text) => {
    const mailOptions = {
        from: 'noreply@example.com',
        to: email,
        subject: 'Reminder Notification',
        text,
    };

    transporter.sendMail(mailOptions, (err, info) => {
        if (err) {
            console.log('Error sending email:', err);
        } else {
            console.log('Email sent:', info.response);
        }
    });
};

module.exports = sendReminderEmail;
```

#### 7. مدیریت ریمایندرها:
برای ارسال ایمیل‌ها در زمان مشخص، از یک کرون جاب یا سیستم زمان‌بندی مانند `node-cron` می‌توانید استفاده کنید.

```bash
npm install node-cron
```

```javascript
// scheduler.js
const cron = require('node-cron');
const Reminder = require('./models/Reminder');
const sendReminderEmail = require('./email');

// زمان‌بندی برای ارسال ایمیل‌ها
cron.schedule('* * * * *', async () => {
    const now = new Date();
    const reminders = await Reminder.find({ date: { $lte: now } }).populate('userId');

    reminders.forEach(reminder => {
        sendReminderEmail(reminder.userId.username, reminder.text);
    });

    // حذف ریمایندرهای ارسال شده
    await Reminder.deleteMany({ date: { $lte: now } });
});
```

#### 8. تنظیم سرور:
در نهایت فایل اصلی سرور را تنظیم می‌کنیم.

```javascript
// app.js
const express = require('express');
const db = require('./db');
const { router: authRoutes, authenticateJWT } = require('./routes/auth');
const adminRoutes = require('./routes/admin');
const reminderRoutes = require('./routes/reminder');
require('./scheduler'); // زمان‌بندی ایمیل‌ها

const app = express();

app.use(express.json());
app.use('/auth', authRoutes);
app.use('/admin', authenticateJWT, adminRoutes);
app.use('/reminder', authenticateJWT, reminderRoutes);

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
```

### نتیجه نهایی:
- **ادمین** می‌تواند کاربران جدید اضافه کند.
- **یوزر** می‌تواند وارد سیستم شود و ریمایندرهای خود را تنظیم کند.
- در زمان مشخص، ریمایندرها از طریق ایمیل ارسال می‌شوند.

این پیاده‌سازی پایه می‌تواند با افزودن ویژگی‌های دیگر مانند اعتبارسنجی ورودی‌ها و مدیریت خطاها بهبود پیدا کند.